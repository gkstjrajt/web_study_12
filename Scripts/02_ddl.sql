-- 접속자 확인
SELECT USER FROM DUAL;

CREATE TABLE MEMBER(
	NAME VARCHAR2(10),
	USERID VARCHAR2(10),
	PWD VARCHAR2(10),
	EMAIL VARCHAR2(20),
	PHONE CHAR(13),
	ADMIN NUMBER(1) DEFAULT 0, -- 0:사용자, 1:관리자
	JOINDATE DATE DEFAULT SYSDATE,
	PRIMARY KEY (USERID)
);

-- NAME 저장공간 20으로 변경
ALTER TABLE MEMBER MODIFY NAME VARCHAR2(20);

SELECT *
  FROM USER_TABLES;

 -- 접속한 계정의 테이블별 제약조건 검색
SELECT *
  FROM USER_CONSTRAINTS
 WHERE TABLE_NAME = 'MEMBER';

-- 접속한 계정의 테이블별 컬럼 조회
SELECT *
  FROM USER_TAB_COLUMNS
 WHERE TABLE_NAME = 'MEMBER';
 
-- TITLE TABLE 생성
CREATE TABLE TITLE(
	TITLE_NO NUMBER PRIMARY KEY,
	TITLE_NAME VARCHAR2(40)
);


-- DEPARTMENT TABLE 생성
CREATE TABLE DEPARTMENT(
	DEPT_NO NUMBER PRIMARY KEY,
	DEPT_NAME VARCHAR2(40),
	DEPT_FLOOR NUMBER
);


-- EMPLOYEE 테이블 생성
CREATE TABLE EMPLOYEE (
    EMP_NO   NUMBER,
    EMP_NAME VARCHAR2(20) NOT NULL,
    TNO      NUMBER,
    MANAGER  NUMBER,
    SALARY   NUMBER,
    DNO      NUMBER,
    EMAIL    VARCHAR2(60) NOT NULL,
    PASSWD   VARCHAR2(60) NOT NULL,
    REGDATE  DATE DEFAULT SYSDATE,
    TEL      CHAR(13),
    PIC_URL  VARCHAR2(100),
    CONSTRAINT EMPLOYEE_EMPNO_PK   PRIMARY KEY (EMP_NO),
    CONSTRAINT EMPLOYEE_TNO_FK     FOREIGN KEY (TNO)     REFERENCES TITLE(TITLE_NO) ON DELETE SET NULL, 
    CONSTRAINT EMPLOYEE_MANAGER_FK FOREIGN KEY (MANAGER) REFERENCES EMPLOYEE(EMP_NO),
    CONSTRAINT EMPLOYEE_SALARY_CK  CHECK (SALARY < 6000000),
    CONSTRAINT EMPLOYEE_DNO_FK     FOREIGN KEY (DNO) REFERENCES DEPARTMENT(DEPT_NO) ON DELETE CASCADE
);

SELECT * FROM EMPLOYEE;


------------------------------------
--------------TRIGGER---------------
------------------------------------

CREATE TABLE PRODUCT(
	CODE NUMBER(5) PRIMARY KEY,
	NAME VARCHAR2(100),
	PRICE NUMBER(8),
	PICTUREURL VARCHAR2(50),
	DESCRIPTION VARCHAR2(1000)
);
DELETE FROM PRODUCT DROP SEQUENCE PRODUCT_SEQ;
CREATE SEQUENCE PRODUCT_SEQ
	START WITH 1
	INCREMENT BY 1;

-- 트리거를 이용하여 자동으로 번호 입력되도록 --
DROP TRIGGER TRI_PRODUCT_CODE_AUTOSEQ;
CREATE OR REPLACE TRIGGER TRI_PRODUCT_CODE_AUTOSEQ
BEFORE INSERT ON PRODUCT
FOR EACH ROW 
BEGIN 
	IF INSERTING AND :NEW.CODE IS NULL THEN
		SELECT PRODUCT_SEQ.NEXTVAL INTO :NEW.CODE FROM DUAL;
	END IF;
END;

INSERT INTO TRI_TEST VALUES(NULL, 'TEST');

SELECT * FROM TRI_TEST;

INSERT INTO TRI_TEST(TXT) VALUES('TEST2');

CREATE PROCEDURE MULTI_QUERY(
	BEGIN 
		DELETE FROM PRODUCT;
		DROP SEQUENCE PRODUCT_SEQ;
		CREATE SEQUENCE PRODUCT_SEQ;
		CREATE OR REPLACE TRIGGER TRI_PRODUCT_CODE_AUTOSEQ
		BEFORE INSERT ON PRODUCT
			FOR EACH ROW 
			BEGIN 
			IF INSERTING AND :NEW.CODE IS NULL THEN
				SELECT PRODUCT_SEQ.NEXTVAL INTO :NEW.CODE FROM DUAL;
			END IF;
		END;
	END
);

CALL MULTI_QUERY;

DROP PROCEDURE MULTI_QUERY;

----------------------------------------------
CREATE TABLE BOARD(
	NUM NUMBER(5) PRIMARY KEY,
	PASS VARCHAR2(30),
	NAME VARCHAR2(30),
	EMAIL VARCHAR2(50),
	TITLE VARCHAR2(50),
	CONTENT VARCHAR2(1000),
	READCOUNT NUMBER(4) DEFAULT 0,
	WRITEDATE DATE DEFAULT SYSDATE
);

CREATE SEQUENCE BOARD_SEQ
	START WITH 1
	INCREMENT BY 1;

DROP SEQUENCE BOARD_SEQ;
-- 트리거를 이용하여 자동으로 번호 입력되도록 --
DROP TRIGGER TRI_BOARD_CODE_AUTOSEQ;
CREATE OR REPLACE TRIGGER TRI_BOARD_CODE_AUTOSEQ
BEFORE INSERT ON BOARD
FOR EACH ROW 
BEGIN 
	IF INSERTING AND :NEW.NUM IS NULL THEN
		SELECT BOARD_SEQ.NEXTVAL INTO :NEW.NUM FROM DUAL;
	END IF;
END;






